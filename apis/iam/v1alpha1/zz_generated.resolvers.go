/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PropositionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PropositionRef,
		Selector:     mg.Spec.ForProvider.PropositionIDSelector,
		To: reference.To{
			List:    &PropositionList{},
			Managed: &Proposition{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PropositionID")
	}
	mg.Spec.ForProvider.PropositionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PropositionRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Client.
func (mg *Client) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ApplicationRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EmailTemplate.
func (mg *EmailTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagingOrganization),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.ManagingOrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagingOrganization")
	}
	mg.Spec.ForProvider.ManagingOrganization = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Proposition.
func (mg *Proposition) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrganizationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.OrganizationIDSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrganizationID")
	}
	mg.Spec.ForProvider.OrganizationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Role.
func (mg *Role) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ManagingOrganization),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.ManagingOrganizationSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ManagingOrganization")
	}
	mg.Spec.ForProvider.ManagingOrganization = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RoleSharingPolicy.
func (mg *RoleSharingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RoleRef,
		Selector:     mg.Spec.ForProvider.RoleIDSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleID")
	}
	mg.Spec.ForProvider.RoleID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetOrganizationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OrganizationRef,
		Selector:     mg.Spec.ForProvider.TargetOrganizationIDSelector,
		To: reference.To{
			List:    &OrganizationList{},
			Managed: &Organization{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetOrganizationID")
	}
	mg.Spec.ForProvider.TargetOrganizationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrganizationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Service.
func (mg *Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ApplicationRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationRef = rsp.ResolvedReference

	return nil
}
